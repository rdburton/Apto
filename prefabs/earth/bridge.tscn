[gd_scene load_steps=8 format=3 uid="uid://cnjq1nxyq4blc"]

[ext_resource type="Script" path="res://scripts/earth/bridge.gd" id="1_6q0dt"]

[sub_resource type="Shader" id="Shader_ttr5w"]
code = "shader_type spatial;
render_mode blend_mix, depth_prepass_alpha;

uniform float roughness : hint_range(0.0, 1.0, 0.1);
uniform float metallic : hint_range(0.0, 1.0, 0.1);

group_uniforms Gradient;
uniform vec4 color_start : source_color = vec4(0.14, 0.63, 0.68, 1.0);
uniform vec4 color_end : source_color = vec4(0.16, 0.52, 0.87, 1.0);
uniform vec3 gradient_dir = vec3(0.0, 1.0, 0.0);
uniform float min_value = -1.0;
uniform float max_value = 1.0;

group_uniforms Fade;
uniform vec4 start_color : source_color = vec4(1.0);
uniform vec4 end_color : source_color = vec4(1.0);
uniform float near_distance : hint_range(0.0, 50.0, 0.1) = 15.0;
uniform float far_distance : hint_range(0.0, 100.0, 0.1) = 100.0;


void fragment()
{
	//Apply directional gradient to object surface
	float gradient_factor = dot(VERTEX, gradient_dir);
	gradient_factor = (gradient_factor - min_value) / (max_value - min_value);
	gradient_factor = clamp(gradient_factor, 0.0, 1.0);
	vec4 gradient_color = mix(color_start, color_end, gradient_factor);
	
	//Calculate distance from camera and apply a fade to the albedo
	vec3 camera_pos = CAMERA_POSITION_WORLD;
	float distance_to_camera = length(camera_pos - NODE_POSITION_WORLD);
	float t = clamp((distance_to_camera - near_distance) / (far_distance - near_distance), 0.0, 1.0);
	vec4 fade_color = mix(gradient_color, end_color, t); // Should start color be gradient_color??
	
	// Mix gradient color and fade color
	vec4 final_color = mix(gradient_color,  fade_color, 0.5);

	ALBEDO = final_color.rgb;
	ALPHA = final_color.a;
	ROUGHNESS = roughness;
	METALLIC = metallic;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_np11t"]
render_priority = 0
shader = SubResource("Shader_ttr5w")
shader_parameter/roughness = 1.0
shader_parameter/metallic = 0.0
shader_parameter/color_start = Color(0.506259, 0.543126, 0.487774, 1)
shader_parameter/color_end = Color(0.584314, 0.619608, 0.564706, 1)
shader_parameter/gradient_dir = Vector3(0, 1, 0)
shader_parameter/min_value = -1.0
shader_parameter/max_value = 1.0
shader_parameter/start_color = Color(1, 1, 1, 1)
shader_parameter/end_color = Color(1, 1, 1, 1)
shader_parameter/near_distance = 50.0
shader_parameter/far_distance = 100.0

[sub_resource type="Animation" id="Animation_tq2ui"]
resource_name = "main"
length = 4.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("BridgePanel:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1.5),
"transitions": PackedFloat32Array(-2, -2),
"update": 0,
"values": [Vector3(0, -4, -3.3), Vector3(0, 4.5, -3.3)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("BridgePanel2:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(1, 2.5),
"transitions": PackedFloat32Array(-2, -2),
"update": 0,
"values": [Vector3(0, -4, -6.6), Vector3(0, 4.5, -6.6)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("BridgePanel3:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(2, 3.5),
"transitions": PackedFloat32Array(-2, -2),
"update": 0,
"values": [Vector3(0, -4, -9.9), Vector3(0, 4.5, -9.9)]
}

[sub_resource type="Animation" id="Animation_q5ngu"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("BridgePanel:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, -4.5, -3.3)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("BridgePanel2:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, -4.5, -6.6)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("BridgePanel3:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, -4.5, -9.9)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_lkna3"]
_data = {
"RESET": SubResource("Animation_q5ngu"),
"main": SubResource("Animation_tq2ui")
}

[sub_resource type="BoxShape3D" id="BoxShape3D_l7mbt"]
size = Vector3(5, 1.5, 2)

[node name="Bridge" type="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -4.5, -16.5)
script = ExtResource("1_6q0dt")

[node name="BridgePanel" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -4.5, -3.3)
material_override = SubResource("ShaderMaterial_np11t")
use_collision = true
size = Vector3(5, 1, 3)

[node name="BridgePanel2" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -4.5, -6.6)
material_override = SubResource("ShaderMaterial_np11t")
use_collision = true
size = Vector3(5, 1, 3)

[node name="BridgePanel3" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -4.5, -9.9)
material_override = SubResource("ShaderMaterial_np11t")
use_collision = true
size = Vector3(5, 1, 3)

[node name="BridgeStart" type="CSGBox3D" parent="."]
material_override = SubResource("ShaderMaterial_np11t")
use_collision = true
size = Vector3(5, 10, 3)

[node name="BridgeStart2" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -13.2)
material_override = SubResource("ShaderMaterial_np11t")
use_collision = true
size = Vector3(5, 10, 3)

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_lkna3")
}

[node name="Area3D" type="Area3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5, 1)

[node name="CollisionShape3D" type="CollisionShape3D" parent="Area3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.75, 1.5)
shape = SubResource("BoxShape3D_l7mbt")

[connection signal="body_entered" from="Area3D" to="." method="_on_area_3d_body_entered"]
